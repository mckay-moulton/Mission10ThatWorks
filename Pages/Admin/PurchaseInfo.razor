@page "/admin/PurchaseInfo"
@inherits OwningComponentBase<IPurchaseRepository>
@*<h3>PurchaseInfo</h3>*@

@*now we will pass in all the paramters the table is looking for*@
<PurchaseTable TableTitle="Not Shipped Purchases" Purchases="UncollectedPurchases" ButtonLabel="Puchased" PurchaseSelected="ResetPurchase">
</PurchaseTable>

@*Ok now be be building our second button to "reset" the donation*@
<PurchaseTable TableTitle="Shipped Purchases" Purchases="CollectedPurchases" ButtonLabel="Reset" PurchaseSelected="CollectPurchase"></PurchaseTable>

@*button to refresh page/data*@
<button class="btn btn-info" @onclick="@(x => UpdateData())">Refresh Data</button>

@code {
    public IPurchaseRepository repo => Service;

    public IEnumerable<Purchase> AllPurchases { get; set; }
    public IEnumerable<Purchase> UncollectedPurchases { get; set; }
    public IEnumerable<Purchase> CollectedPurchases { get; set; }

    protected async override Task OnInitializedAsync()
    {
        await UpdateData();
    }

    public async Task UpdateData()
    {
        AllPurchases = await repo.Purch.ToListAsync();
        UncollectedPurchases = AllPurchases.Where(x => !x.Shipped);
        CollectedPurchases = AllPurchases.Where(x => x.Shipped);
    }

    public void CollectPurchase(int id) => UpdatePurchase(id, true);
    public void ResetPurchase(int id) => UpdatePurchase(id, false);

    private void UpdatePurchase(int id, bool updated)
    {
        Purchase p = repo.Purch.FirstOrDefault(x => x.PurchaseID == id);
        p.Shipped = updated;
        repo.SavePurchase(p);
    }
}
