@page "/admin/books"
@*set default to if user just goes to admin*@
@*It will take them to the projects page still*@
@page "/admin"
@inherits OwningComponentBase<IBookstoreRepository>

<table class="table table-sm table-striped table-bordered">
    <thead>
        @*set up table headers*@
        <tr>
            <th>BookID</th>
            <th>Book Name</th>
            <th>Author</th>
        </tr>
    </thead>
    @*now for the table content*@
<tbody>
    @if (BookData?.Count() > 0)
    {
        //List Books
        @foreach (Bookstores b in BookData)
        {
    <tr>
        <td>@b.BookID</td>
        <td>@b.Title</td>
        <td>@b.Author</td>

        @*//add buttons*@
        <td>
            <NavLink class="btn btn-info btn-sm" href="@GetDetailsUrl(b.BookID)">Details</NavLink>
        </td>

        <td>
            <NavLink class="btn btn-warning btn-sm" href="@GetEditUrl(b.BookID)">Edit</NavLink>
        </td>
        <td>
            <NavLink class="btn btn-danger btn-sm" @onclick="@(x => DeleteBook(b))">Delete</NavLink>
        </td>
    </tr>
        }
    }
    else
    {
        <tr>
            <td colspan="5" class="text-center">There Are No Books</td>
        </tr>
    }
</tbody>
</table>

@code {
    public IBookstoreRepository repo => Service;
    public IEnumerable<Bookstores> BookData { get; set; }
    protected async override Task OnInitializedAsync()
    {
        await UpdateDate();
    }
    public async Task UpdateDate()
    {
        BookData = await repo.Books.ToListAsync();
    }
    //now we need to add the functions we created buttons for

    public string GetDetailsUrl(long id) => $"/admin/Books/details/{id}";
    public string GetEditUrl(long id) => $"/admin/Books/edit{id}";

    public async Task DeleteBook (Bookstores b)
    {
        repo.DeleteBook(b);
        await UpdateDate();
    }
}

